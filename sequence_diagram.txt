actor Client
participant Server
participant Handler
participant Service
participant DataAccess
database db

entryspacing 0.9
group#43829c #lightblue Registration
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
break User with username already exists
DataAccess --> Service: UserData
Service --> Server: AlreadyTakenException
Server --> Client: 403\n{"message": "Error: username already taken"}
end
DataAccess --> Service: null
Service -> DataAccess:createUser(userData)
DataAccess -> db:Add UserData
Service -> DataAccess:createAuth(authData)
DataAccess -> db:Add AuthData
Service --> Handler: RegisterResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end

group#orange #FCEDCA Login
Client -> Server: [POST] /session\n{username, password}
Server -> Handler:{"username":" ", "password":" "}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db: Find UserData by username
DataAccess --> Service: UserData
Service->Service: validatePassword(password)
Service -> DataAccess:createAuth(authData)
DataAccess -> db:Add AuthData
Service --> Handler: RegisterResult
Handler-->Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end

group#green #lightgreen Logout
Client -> Server: [DELETE] /session\nauthToken
Server -> Handler: authToken
Handler->Service: logout(LogoutRequest)
Service->DataAccess: getAuth(authToken)
DataAccess->db: Find AuthData by authToken
DataAccess-->Service: AuthData
Service->DataAccess:deleteAuth(authToken)
DataAccess->db: Delete AuthData by authToken
Service-->Handler: LogoutResult
Handler-->Server:{}
Server-->Client:200\n{}
end

group#red #pink List Games
Client -> Server: [GET] /game\nauthToken
Server->Handler: authToken
Handler->Service:listGames(ListGamesRequest)
Service->DataAccess: getAuth(authToken)
DataAccess->db: Find AuthData by authToken
DataAccess-->Service: AuthData
Service->DataAccess: listGames()
DataAccess->db: Select * from games\nStore in GameList (= Collection<gameData>)\n
DataAccess-->Service: GameList
Service-->Handler: ListGamesResult
Handler-->Server:{ "games": [{"gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""} ]}
Server-->Client: 200 \n { "games": [{"gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""} ]}
end

group#d790e0 #E3CCE6 Create Game 
Client -> Server: [POST] /game\nauthToken\n{gameName}
Server->Handler: authToken \n{ "gameName":" "}
Handler->Service:createGame(CreateGameRequest)
Service->DataAccess:getAuth(authToken)
DataAccess->db: Find AuthData by authToken
DataAccess-->Service: AuthData
Service->DataAccess:createGame(gameName)
DataAccess->db: Add GameData
DataAccess-->Service: gameID
Service-->Handler: CreateGameResult
Handler-->Server:{ "gameID": 1234 }
Server-->Client:200\n { "gameID": 1234 }
end

group#yellow #lightyellow Join Game #black
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}
Server->Handler: authToken \n{ "playerColor":" ", "gameID":" "}
Handler->Service:joinGame(JoinGameRequest)
Service->DataAccess: getAuth(authToken)
DataAccess->db: Find AuthData by authToken
DataAccess-->Service: AuthData
Service->DataAccess:getGame(gameID)
DataAccess->db: Find GameData by gameID
DataAccess-->Service: GameData
Service->Service:isColorTaken(playerColor, GameData)
Service->DataAccess:updateGame(playerColor, AuthData.username, GameData)
DataAccess->db: Update GameData by gameID
Service-->Handler: JoinGameResult
Handler-->Server:{}
Server-->Client:200\n{}
end

group#gray #lightgray Clear application 
Client -> Server: [DELETE] /db
Server->Handler: {}
Handler->Service:clearData(ClearDataRequest)
Service->DataAccess: clearAuth()
DataAccess->db: Clear All AuthData in Auth DataBase
DataAccess --> Service: {}
Service->DataAccess: clearGames()
DataAccess->db: Clear All GameData in Game DataBase
DataAccess --> Service:{}

Service->DataAccess: clearUsers()
DataAccess->db: Clear All UserData in User DataBase
DataAccess --> Service:{}
Service-->Handler: ClearDataResult
Handler-->Server:{}
Server-->Client:200\n{}
end
